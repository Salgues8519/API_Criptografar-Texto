import dotenv from 'dotenv'
dotenv.config()

const SECRET_KEY = process.env.SECRET_KEY || 'defaultSecret';



const criptoMap: Record<string, string[]> = {
    'A': ['@', '!', '*', '∆', '◊'], 'a': ['@', '!', '*', '∆', '◊'],
    'B': ['&', '#', '+', '¥', '¿'], 'b': ['&', '#', '+', '¥', '¿'],
    'C': ['¢', '^', '©', '√', '‰'], 'c': ['¢', '^', '©', '√', '‰'],
    'D': ['¬', '~', '÷', '∞', '†'], 'd': ['¬', '~', '÷', '∞', '†'],
    'E': ['3', '€', '£', '∑', '§'], 'e': ['3', '€', '£', '∑', '§'],
    'F': ['*', '%', 'ƒ', '¶', 'ß'], 'f': ['*', '%', 'ƒ', '¶', 'ß'],
    'G': ['+', '=', '≥', '∂', '¡'], 'g': ['+', '=', '≥', '∂', '¡'],
    'H': ['/', '|', '╫', '╣', '∩'], 'h': ['/', '|', '╫', '╣', '∩'],
    'I': ['<', '«', '›', '1', '¡'], 'i': ['<', '«', '›', '1', '¡'],
    'J': ['~', '`', '†', '◘', '░'], 'j': ['~', '`', '†', '◘', '░'],
    'K': ['4', '{', '}', '[', ']'], 'k': ['4', '{', '}', '[', ']'],
    'L': ['>', '¬', '¦', '╚', '═'], 'l': ['>', '¬', '¦', '╚', '═'],
    'M': ['Ω', '≠', '⊕', '⋈', 'µ'], 'm': ['Ω', '≠', '⊕', '⋈', 'µ'],
    'N': ['φ', 'π', '≈', '⋂', '≡'], 'n': ['φ', 'π', '≈', '⋂', '≡'],
    'O': ['δ', 'ø', '◙', '○', '¤'], 'o': ['δ', 'ø', '◙', '○', '¤'],
    'P': ['1', '¶', '¡', '©', '†'], 'p': ['1', '¶', '¡', '©', '†'],
    'Q': ['ß', 'œ', '»', '«', '♣'], 'q': ['ß', 'œ', '»', '«', '♣'],
    'R': ['Σ', '®', '¤', '◄', '»'], 'r': ['Σ', '®', '¤', '◄', '»'],
    'S': ['╞', '$', '§', '™', '¤'], 's': ['╞', '$', '§', '™', '¤'],
    'T': ['╚', '†', '†', '⇔', '♠'], 't': ['╚', '†', '†', '⇔', '♠'],
    'U': ['§', '¨', '↑', '↓', '↕'], 'u': ['§', '¨', '↑', '↓', '↕'],
    'V': ['∩', '⋅', '▣', '↔', '≅'], 'v': ['∩', '⋅', '▣', '↔', '≅'],
    'W': ['■', '▧', '▣', '◘', '♦'], 'w': ['■', '▧', '▣', '◘', '♦'],
    'X': ['╨', '×', '❌', '✖', '⨉'], 'x': ['╨', '×', '❌', '✖', '⨉'],
    'Y': ['µ', '¥', '✓', '✔', '☑'], 'y': ['µ', '¥', '✓', '✔', '☑'],
    'Z': ['0', 'Ω', '⬤', '◉', '◍'], 'z': ['0', 'Ω', '⬤', '◉', '◍']
};

function getSymbolIndex(char: string, index: number): number {
    const charCode = char.charCodeAt(0);
    const keyCodeSum = SECRET_KEY
    .split('')
    .map(c => c.charCodeAt(0))
    .reduce((acc, cur) => acc + cur, 0);

    return (charCode + keyCodeSum + index * 17) % 5; 
}

export function encrypt(text: string): string {
    let encrypted = '';

    for (let i = 0; i < text.length; i++) {
    const char = text[i];

    if (criptoMap[char]) {
        const symbolIndex = getSymbolIndex(char, i);
        encrypted += criptoMap[char][symbolIndex];
    } else {
        encrypted += char;
    }
}

    return encrypted;
}